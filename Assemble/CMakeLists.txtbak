cmake_minimum_required(VERSION 3.5.1)
#project(Assemble)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED True)


set(RTE_SDK /home/king/dpdk-stable-19.08.2/)
set(RTE_TARGET x86_64-native-linux-gcc)

set(SOURCE_FILE
        LinkLayerAssemble.c
        LinkLayerAssemble.h
        NetworkAssemble.h
        NetworkAssemble.c
        TransLayerAssemble.h
        TransLayerAssemble.c)

set(WERROR_FLAGS
        -W
        -Wall
        #        -Wstrict-prototypes
        #        -Wmissing-prototypes
        -Wmissing-declarations
        #        -Wold-style-definition
        -Wpointer-arith
        -Wcast-align
        #        -Wnested-externs
        -Wcast-qual
        -Wformat-nonliteral
        -Wformat-security
        -Wundef
        -Wwrite-strings
        -Wdeprecated)

set(CFLAGS
        -m64
        -pthread
        -march=native
        #-include ${RTE_SDK}/${RTE_TARGET}/include/rte_config.h
        -O3
        ${WERROR_FLAGS})

set(DPDKLIBS
        -Wl,--whole-archive
        -ldpdk
        -Wl,--no-whole-archive)

add_definitions(
        -DRTE_MACHINE_CPUFLAG_SSE
        -DRTE_MACHINE_CPUFLAG_SSE2
        -DRTE_MACHINE_CPUFLAG_SSE3
        -DRTE_MACHINE_CPUFLAG_SSSE3
        -DRTE_MACHINE_CPUFLAG_SSE4_1
        -DRTE_MACHINE_CPUFLAG_SSE4_2
        -DRTE_MACHINE_CPUFLAG_AES
        -DRTE_MACHINE_CPUFLAG_PCLMULQDQ
        -DRTE_MACHINE_CPUFLAG_AVX
        -DRTE_MACHINE_CPUFLAG_RDRAND
        -DRTE_MACHINE_CPUFLAG_FSGSBASE
        -DRTE_MACHINE_CPUFLAG_F16C
        -DRTE_MACHINE_CPUFLAG_AVX2
        -D_GNU_SOURCE)

add_compile_options(${CFLAGS})

include_directories(${RTE_SDK}/${RTE_TARGET}/include)

link_directories(${RTE_SDK}/${RTE_TARGET}/lib)
link_libraries(
        ${DPDKLIBS}
        pthread
        rt
        dl
        m
        numa
        pcap)
include_directories(.)
#set(LIBRARY_OUTPUT_PATH /home/king/learning_dpdk19.08/Assemble)
#add_compile_options(-fPIC)
aux_source_directory(. DIR_LIB_SRCS)
#add_library(Assemblelib  ${DIR_LIB_SRCS})

#add_executable(Assemble ${SOURCE_FILE})

